{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\scott\\\\IntelliJ\\\\MandelbrotApp\\\\src\\\\Fractal.js\";\nimport React from 'react';\n\nclass Fractal extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = e => {\n      //zooms and focuses fractal on click\n      const canvas = this.refs.canvas;\n      let rect = canvas.getBoundingClientRect(); // abs. size of element\n\n      let scaleX = canvas.width / rect.width; // relationship bitmap vs. element for X\n\n      let scaleY = canvas.height / rect.height; // relationship bitmap vs. element for Y\n\n      let newX = (e.clientX - rect.left) * scaleX; // scale mouse coordinates after they have\n\n      let newY = (e.clientY - rect.top) * scaleY; // been adjusted to be relative to element\n\n      this.setState(prevState => {\n        console.log(this.state.i);\n        return {\n          x: prevState.x + (newX - this.state.width / 2) / this.state.scale,\n          y: prevState.y + (newY - this.state.height / 2) / this.state.scale,\n          i: prevState.i *= 2,\n          scale: prevState.scale * 2\n        };\n      });\n    };\n\n    this.state = {\n      width: 1280,\n      //the width of the fractal\n      height: 720,\n      //the height of the fractal\n      x: 640,\n      //the center x-coordinate of the fractal\n      y: 360,\n      //the center y-coordinate of the fractal\n      i: 50,\n      //initial number of iterations\n      scale: 1 //initial scale\n\n    };\n  }\n\n  componentDidMount() {\n    //loads image to canvas to map bitmap to image for handleClick()\n    let canvas = this.refs.canvas;\n    let ctx = canvas.getContext(\"2d\");\n    let img = this.refs.image;\n\n    img.onload = () => {\n      ctx.drawImage(img, 0, 0);\n    };\n  }\n\n  render() {\n    var url = \"http://localhost:8080/mandelbrot?\" + \"width=\" + this.state.width + \"&hight=\" + this.state.height + \"&x=\" + this.state.x + \"&y=\" + this.state.y + \"&scale=\" + this.state.scale + \"&i=\" + this.state.i;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"centerContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: \"canvas\",\n      className: \"center\",\n      width: this.state.width,\n      height: this.state.height,\n      onClick: this.handleClick.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"img\", {\n      className: \"center\",\n      ref: \"image\",\n      src: url,\n      alt: \"new\",\n      style: {\n        display: 'none'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nexport default Fractal;","map":{"version":3,"sources":["C:/Users/scott/IntelliJ/MandelbrotApp/src/Fractal.js"],"names":["React","Fractal","Component","constructor","props","handleClick","e","canvas","refs","rect","getBoundingClientRect","scaleX","width","scaleY","height","newX","clientX","left","newY","clientY","top","setState","prevState","console","log","state","i","x","scale","y","componentDidMount","ctx","getContext","img","image","onload","drawImage","render","url","bind","display"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nclass Fractal extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            width: 1280,        //the width of the fractal\r\n            height: 720,        //the height of the fractal\r\n            x: 640,             //the center x-coordinate of the fractal\r\n            y: 360,             //the center y-coordinate of the fractal\r\n            i: 50,              //initial number of iterations\r\n            scale: 1            //initial scale\r\n        };\r\n    }\r\n\r\n    handleClick = e => {                                //zooms and focuses fractal on click\r\n        const canvas = this.refs.canvas;\r\n        let rect = canvas.getBoundingClientRect();      // abs. size of element\r\n        let scaleX = canvas.width / rect.width;         // relationship bitmap vs. element for X\r\n        let scaleY = canvas.height / rect.height;       // relationship bitmap vs. element for Y\r\n        let newX = (e.clientX - rect.left) * scaleX;    // scale mouse coordinates after they have\r\n        let newY = (e.clientY - rect.top) * scaleY;     // been adjusted to be relative to element\r\n\r\n        this.setState(prevState => {\r\n        console.log(this.state.i);\r\n           return {\r\n           x: prevState.x + (newX - (this.state.width/2))/this.state.scale,\r\n           y: prevState.y + (newY - (this.state.height/2))/this.state.scale,\r\n           i: prevState.i*=2,\r\n           scale: prevState.scale*2}\r\n        })\r\n    }\r\n\r\n    componentDidMount() {                               //loads image to canvas to map bitmap to image for handleClick()\r\n        let canvas = this.refs.canvas\r\n        let ctx = canvas.getContext(\"2d\")\r\n        let img = this.refs.image\r\n\r\n        img.onload = () => {\r\n              ctx.drawImage(img, 0, 0)\r\n          }\r\n      }\r\n\r\n    render() {\r\n        var url = \"http://localhost:8080/mandelbrot?\" +\r\n                        \"width=\" + this.state.width +\r\n                        \"&hight=\" + this.state.height +\r\n                        \"&x=\" + this.state.x +\r\n                        \"&y=\" + this.state.y +\r\n                        \"&scale=\" + this.state.scale +\r\n                        \"&i=\" + this.state.i;\r\n\r\n        return <div className=\"centerContainer\">\r\n            <canvas ref=\"canvas\" className=\"center\" width={this.state.width} height={this.state.height} onClick={this.handleClick.bind(this)}/>\r\n            <img className=\"center\" ref=\"image\" src={url} alt=\"new\" style={{display: 'none'}} />\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default Fractal;"]},"metadata":{},"sourceType":"module"}