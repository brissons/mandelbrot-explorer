{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\scott\\\\IntelliJ\\\\MandelbrotApp\\\\src\\\\Fractal.js\";\nimport React from 'react';\nimport './styles.css';\n\nvar bigdecimal = require(\"bigdecimal\");\n\nfunction swapElements(obj1, obj2) {\n  obj2.nextSibling === obj1 ? obj1.parentNode.insertBefore(obj2, obj1.nextSibling) : obj1.parentNode.insertBefore(obj2, obj1);\n}\n\nclass Fractal extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = e => {\n      //zooms and focuses fractal on click\n      const canvas = this.refs.canvas;\n      let rect = canvas.getBoundingClientRect(); // abs. size of element\n\n      let scaleX = canvas.width / rect.width; // relationship bitmap vs. element for X\n\n      let scaleY = canvas.height / rect.height; // relationship bitmap vs. element for Y\n      //let newX = (e.clientX - rect.left) * scaleX;    // scale mouse coordinates after they have\n      //let newY = (e.clientY - rect.top) * scaleY;     // been adjusted to be relative to element\n\n      let newX = new bigdecimal.BigDecimal((e.clientX - rect.left) * scaleX);\n      let newY = new bigdecimal.BigDecimal((e.clientY - rect.left) * scaleY);\n      this.setState(prevState => {\n        return {\n          //x: prevState.x + (newX - (this.state.width/2))/this.state.scale,\n          x: prevState.x.add(newX.subtract(new bigdecimal.BigDecimal(this.state.width / 2.0)).divide(new bigdecimal.BigDecimal(this.state.scale))),\n          //y: prevState.y + (newY - (this.state.height/2))/this.state.scale,\n          y: prevState.y.add(newY.subtract(new bigdecimal.BigDecimal(this.state.height / 2.0)).divide(new bigdecimal.BigDecimal(this.state.scale))),\n          i: prevState.i += 20,\n          scale: prevState.scale * 2\n        };\n      });\n    };\n\n    this.state = {\n      width: 1280,\n      //the width of the fractal\n      height: 720,\n      //the height of the fractal\n      //x: 640,\n      x: new bigdecimal.BigDecimal(640),\n      //the center x-coordinate of the fractal\n      //y: 360,             //the center y-coordinate of the fractal\n      y: new bigdecimal.BigDecimal(360),\n      i: 50,\n      //initial number of iterations\n      scale: 1 //initial scale\n\n    };\n  }\n\n  componentDidMount() {\n    //loads image to canvas to map bitmap to image for handleClick()\n    let canvas = this.refs.canvas;\n    let canvasTwo = this.refs.canvasTwo;\n    let ctx = canvas.getContext(\"2d\");\n    let ctxTwo = canvasTwo.getContext(\"2d\");\n    let img = this.refs.image;\n\n    img.onload = () => {\n      console.log(\"first layer visible\");\n      canvas.classList.remove(\"invisible\");\n      canvas.classList.add(\"visible\");\n      console.log(\"drawing second layer\");\n      ctxTwo.drawImage(img, 0, 0);\n      setTimeout(function () {\n        console.log(\"first layer fadingOut\");\n        canvas.classList.remove(\"visible\");\n        canvas.classList.add(\"invisible\");\n        canvas.classList.add(\"fadeOut\");\n      }, 1500);\n      setTimeout(function () {\n        console.log(\"drawing first layer\");\n        ctx.drawImage(img, 0, 0);\n      }, 2000);\n    };\n  }\n\n  render() {\n    var url = \"http://localhost:8080/mandelbrot?\" + \"width=\" + this.state.width + \"&hight=\" + this.state.height + \"&x=\" + this.state.x + \"&y=\" + this.state.y + \"&scale=\" + this.state.scale + \"&i=\" + this.state.i;\n    console.log(url);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"centerContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: \"canvas\",\n      className: \"center\",\n      style: {\n        display: 'block',\n        zIndex: \"1\"\n      },\n      width: this.state.width,\n      height: this.state.height,\n      onClick: this.handleClick.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: \"canvasTwo\",\n      className: \"center\",\n      style: {\n        display: 'block'\n      },\n      width: this.state.width,\n      height: this.state.height,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"img\", {\n      className: \"center\",\n      ref: \"image\",\n      src: url,\n      alt: \"new\",\n      style: {\n        display: 'none'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default Fractal;","map":{"version":3,"sources":["C:/Users/scott/IntelliJ/MandelbrotApp/src/Fractal.js"],"names":["React","bigdecimal","require","swapElements","obj1","obj2","nextSibling","parentNode","insertBefore","Fractal","Component","constructor","props","handleClick","e","canvas","refs","rect","getBoundingClientRect","scaleX","width","scaleY","height","newX","BigDecimal","clientX","left","newY","clientY","setState","prevState","x","add","subtract","state","divide","scale","y","i","componentDidMount","canvasTwo","ctx","getContext","ctxTwo","img","image","onload","console","log","classList","remove","drawImage","setTimeout","render","url","display","zIndex","bind"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport './styles.css'\r\n\r\nvar bigdecimal = require(\"bigdecimal\");\r\n\r\nfunction swapElements(obj1, obj2) {\r\n    obj2.nextSibling === obj1\r\n    ? obj1.parentNode.insertBefore(obj2, obj1.nextSibling)\r\n    : obj1.parentNode.insertBefore(obj2, obj1);\r\n}\r\n\r\nclass Fractal extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            width: 1280,        //the width of the fractal\r\n            height: 720,        //the height of the fractal\r\n            //x: 640,\r\n            x: new bigdecimal.BigDecimal(640),             //the center x-coordinate of the fractal\r\n            //y: 360,             //the center y-coordinate of the fractal\r\n            y: new bigdecimal.BigDecimal(360),\r\n            i: 50,              //initial number of iterations\r\n            scale: 1            //initial scale\r\n        };\r\n    }\r\n\r\n    handleClick = e => {                                //zooms and focuses fractal on click\r\n        const canvas = this.refs.canvas;\r\n        let rect = canvas.getBoundingClientRect();      // abs. size of element\r\n        let scaleX = canvas.width / rect.width;         // relationship bitmap vs. element for X\r\n        let scaleY = canvas.height / rect.height;       // relationship bitmap vs. element for Y\r\n        //let newX = (e.clientX - rect.left) * scaleX;    // scale mouse coordinates after they have\r\n        //let newY = (e.clientY - rect.top) * scaleY;     // been adjusted to be relative to element\r\n        let newX = new bigdecimal.BigDecimal((e.clientX - rect.left) * scaleX);\r\n        let newY = new bigdecimal.BigDecimal((e.clientY - rect.left) * scaleY);\r\n\r\n        this.setState(prevState => {\r\n\r\n\r\n           return {\r\n           //x: prevState.x + (newX - (this.state.width/2))/this.state.scale,\r\n           x:  prevState.x.add(newX.subtract(new bigdecimal.BigDecimal(this.state.width/2.0)).divide(new bigdecimal.BigDecimal(this.state.scale))),\r\n           //y: prevState.y + (newY - (this.state.height/2))/this.state.scale,\r\n           y:  prevState.y.add(newY.subtract(new bigdecimal.BigDecimal(this.state.height/2.0)).divide(new bigdecimal.BigDecimal(this.state.scale))),\r\n           i: prevState.i+=20,\r\n           scale: prevState.scale*2}\r\n        })\r\n    }\r\n\r\n    componentDidMount() {                               //loads image to canvas to map bitmap to image for handleClick()\r\n        let canvas = this.refs.canvas\r\n        let canvasTwo = this.refs.canvasTwo\r\n\r\n        let ctx = canvas.getContext(\"2d\")\r\n        let ctxTwo = canvasTwo.getContext(\"2d\")\r\n\r\n        let img = this.refs.image\r\n\r\n\r\n        img.onload = () => {\r\n\r\n            console.log(\"first layer visible\");\r\n            canvas.classList.remove(\"invisible\");\r\n            canvas.classList.add(\"visible\");\r\n        \r\n            console.log(\"drawing second layer\");\r\n            ctxTwo.drawImage(img, 0, 0);\r\n\r\n            setTimeout(function(){\r\n                console.log(\"first layer fadingOut\");\r\n                canvas.classList.remove(\"visible\");\r\n                canvas.classList.add(\"invisible\");\r\n                canvas.classList.add(\"fadeOut\");\r\n\r\n            }, 1500);\r\nsetTimeout(function(){\r\n                     console.log(\"drawing first layer\");\r\n                     ctx.drawImage(img, 0, 0);\r\n\r\n            }, 2000);\r\n\r\n\r\n\r\n\r\n          }\r\n      }\r\n\r\n    render() {\r\n        var url = \"http://localhost:8080/mandelbrot?\" +\r\n                        \"width=\" + this.state.width +\r\n                        \"&hight=\" + this.state.height +\r\n                        \"&x=\" + this.state.x +\r\n                        \"&y=\" + this.state.y +\r\n                        \"&scale=\" + this.state.scale +\r\n                        \"&i=\" + this.state.i;\r\n\r\n        console.log(url);\r\n        return( <div className=\"centerContainer\">\r\n                <canvas ref=\"canvas\" className=\"center\" style={{display: 'block', zIndex: \"1\"}} width={this.state.width} height={this.state.height} onClick={this.handleClick.bind(this)}/>\r\n                <canvas ref=\"canvasTwo\" className=\"center\" style={{display: 'block'}} width={this.state.width} height={this.state.height}/>\r\n                <img className=\"center\" ref=\"image\" src={url} alt=\"new\" style={{display: 'none'}} />\r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default Fractal;"]},"metadata":{},"sourceType":"module"}