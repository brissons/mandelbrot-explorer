{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\scott\\\\IntelliJ\\\\MandelbrotApp\\\\src\\\\Fractal.js\";\nimport React from 'react';\nimport './styles.css';\nimport Overlay from \"./Overlay.js\";\nimport Scale from \"./Scale.js\";\nimport LoadingOverlay from 'react-loading-overlay';\nimport { FlagSpinner } from \"react-spinners-kit\";\n\nvar bigdecimal = require(\"bigdecimal\");\n\nvar HALF_UP = bigdecimal.RoundingMode.HALF_UP();\n\nclass Fractal extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = e => {\n      //zooms and focuses fractal on click\n      const canvas = this.refs.canvas;\n      let rect = canvas.getBoundingClientRect(); // abs. size of element\n\n      let rectWidth = new bigdecimal.BigDecimal(rect.width);\n      let rectHeight = new bigdecimal.BigDecimal(rect.height);\n      let rectLeft = new bigdecimal.BigDecimal(rect.left);\n      let rectRight = new bigdecimal.BigDecimal(rect.right);\n      let rectTop = new bigdecimal.BigDecimal(rect.top);\n      let clientX = new bigdecimal.BigDecimal(e.clientX);\n      let clientY = new bigdecimal.BigDecimal(e.clientY);\n      let canvasWidth = new bigdecimal.BigDecimal(canvas.width);\n      let scaleX = new bigdecimal.BigDecimal(canvas.width).divide(rectWidth, 20, HALF_UP); // relationship bitmap vs. element for X\n\n      let scaleY = new bigdecimal.BigDecimal(canvas.height).divide(rectHeight, 20, HALF_UP); // relationship bitmap vs. element for Y\n      //let newX = (e.clientX - rect.left) * scaleX;    // scale mouse coordinates after they have\n      //let newY = (e.clientY - rect.top) * scaleY;     // been adjusted to be relative to element\n\n      let newX = new bigdecimal.BigDecimal(e.clientX).subtract(rectLeft).multiply(scaleX);\n      let newY = new bigdecimal.BigDecimal(e.clientY).subtract(rectTop).multiply(scaleY); //        x: (evt.clientX - rect.left) / (rect.right - rect.left) * canvas.width,\n      //        y: (evt.clientY - rect.top) / (rect.bottom - rect.top) * canvas.height\n      //https://stackoverflow.com/questions/17130395/real-mouse-position-in-canvas/33063222#33063222\n      //https://stackoverflow.com/questions/17130395/real-mouse-position-in-canvas\n      //        const scale = this.refs.scale;\n      //        scale.classList.add(\"scaleAnimation:hover\");\n\n      this.setState(prevState => {\n        return {\n          //           x: prevState.x + (newX - (this.state.width/2))/this.state.scale,\n          x: clientX.subtract(rectLeft).divide(rectRight.subtract(rectLeft), 20, HALF_UP).multiply(canvasWidth),\n          y: prevState.y + (newY - this.state.height / 2) / this.state.scale,\n          i: prevState.i += 10,\n          scale: prevState.scale * 2,\n          intro: false\n        };\n      });\n    };\n\n    this.state = {\n      width: 1920,\n      //the width of the fractal\n      height: 1440,\n      //the height of the fractal\n      x: new bigdecimal.BigDecimal(960 - 25),\n      y: new bigdecimal.BigDecimal(720),\n      //            x: 960 - 25,\n      //            y: 720,\n      i: 180,\n      //initial number of iterations\n      scale: 1,\n      //initial scale\n      intro: true,\n      loading: true,\n      loaded: false\n    };\n  }\n\n  imageLoaded() {\n    this.setState({\n      loaded: true,\n      loading: false\n    });\n  }\n\n  componentDidMount() {\n    //loads image to canvas to map bitmap to image for handleClick()\n    let canvas = this.refs.canvas;\n    let ctx = canvas.getContext(\"2d\"); //        let ctxTwo = this.refs.canvasTwo.getContext(\"2d\")\n\n    let img = this.refs.image;\n\n    img.onload = () => {\n      //            canvas.classList.remove(\"visible\");\n      //            ctxTwo.drawImage(img, 0, 0);\n      //            canvas.classList.add(\"fadeOut\");\n      //            setTimeout(function(){\n      ctx.drawImage(img, 0, 0); //                canvas.classList.remove(\"fadeOut\");\n      //                canvas.classList.add(\"visible\");\n      //            }, 500);\n    };\n  } //    removeFade() {\n  //        let scale = this.refs.scale;\n  //        scale.classList.remove('scaleAnimation');\n  //        console.log(\"hit!\");\n  //    }\n\n\n  render() {\n    var url = \"http://localhost:8080/mandelbrot?\" + \"width=\" + this.state.width + \"&height=\" + this.state.height + \"&x=\" + this.state.x + \"&y=\" + this.state.y + \"&scale=\" + this.state.scale + \"&i=\" + this.state.i;\n    console.log(url);\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: \"canvas\",\n      className: \"center\",\n      style: {\n        display: 'block',\n        zIndex: \"1\"\n      },\n      width: this.state.width,\n      height: this.state.height,\n      onClick: this.handleClick.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }\n    }), \"//            \", /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: \"canvasTwo\",\n      className: \"center\",\n      style: {\n        display: 'block'\n      },\n      width: this.state.width,\n      height: this.state.height,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"img\", {\n      onLoad: this.imageLoaded.bind(this),\n      className: \"center\",\n      ref: \"image\",\n      src: url,\n      alt: \"new\",\n      style: {\n        display: 'none'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }\n    }), \";\");\n  }\n\n}\n\nexport default Fractal;","map":{"version":3,"sources":["C:/Users/scott/IntelliJ/MandelbrotApp/src/Fractal.js"],"names":["React","Overlay","Scale","LoadingOverlay","FlagSpinner","bigdecimal","require","HALF_UP","RoundingMode","Fractal","Component","constructor","props","handleClick","e","canvas","refs","rect","getBoundingClientRect","rectWidth","BigDecimal","width","rectHeight","height","rectLeft","left","rectRight","right","rectTop","top","clientX","clientY","canvasWidth","scaleX","divide","scaleY","newX","subtract","multiply","newY","setState","prevState","x","y","state","scale","i","intro","loading","loaded","imageLoaded","componentDidMount","ctx","getContext","img","image","onload","drawImage","render","url","console","log","display","zIndex","bind"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport './styles.css'\r\nimport Overlay from \"./Overlay.js\"\r\nimport Scale from \"./Scale.js\"\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport { FlagSpinner } from \"react-spinners-kit\";\r\n\r\nvar bigdecimal = require(\"bigdecimal\");\r\nvar HALF_UP = bigdecimal.RoundingMode.HALF_UP();\r\n\r\nclass Fractal extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            width: 1920,        //the width of the fractal\r\n            height: 1440,        //the height of the fractal\r\n            x: new bigdecimal.BigDecimal(960 - 25),\r\n            y: new bigdecimal.BigDecimal(720),\r\n//            x: 960 - 25,\r\n//            y: 720,\r\n            i: 180,              //initial number of iterations\r\n            scale: 1,            //initial scale\r\n            intro: true,\r\n            loading: true,\r\n            loaded: false\r\n        };\r\n    }\r\n\r\n    handleClick = e => {                                //zooms and focuses fractal on click\r\n        const canvas = this.refs.canvas;\r\n        let rect = canvas.getBoundingClientRect();      // abs. size of element\r\n\r\n        let rectWidth = new bigdecimal.BigDecimal(rect.width);\r\n        let rectHeight = new bigdecimal.BigDecimal(rect.height);\r\n        let rectLeft = new bigdecimal.BigDecimal(rect.left);\r\n        let rectRight = new bigdecimal.BigDecimal(rect.right);\r\n        let rectTop = new bigdecimal.BigDecimal(rect.top);\r\n        let clientX = new bigdecimal.BigDecimal(e.clientX);\r\n        let clientY = new bigdecimal.BigDecimal(e.clientY);\r\n        let canvasWidth = new bigdecimal.BigDecimal(canvas.width);\r\n\r\n        let scaleX = new bigdecimal.BigDecimal(canvas.width).divide(rectWidth,20, HALF_UP);         // relationship bitmap vs. element for X\r\n        let scaleY = new bigdecimal.BigDecimal(canvas.height).divide(rectHeight,20, HALF_UP);       // relationship bitmap vs. element for Y\r\n        //let newX = (e.clientX - rect.left) * scaleX;    // scale mouse coordinates after they have\r\n        //let newY = (e.clientY - rect.top) * scaleY;     // been adjusted to be relative to element\r\n        let newX = (new bigdecimal.BigDecimal(e.clientX).subtract(rectLeft)).multiply(scaleX);\r\n        let newY = (new bigdecimal.BigDecimal(e.clientY).subtract(rectTop)).multiply(scaleY);\r\n\r\n\r\n//        x: (evt.clientX - rect.left) / (rect.right - rect.left) * canvas.width,\r\n//        y: (evt.clientY - rect.top) / (rect.bottom - rect.top) * canvas.height\r\n\r\n//https://stackoverflow.com/questions/17130395/real-mouse-position-in-canvas/33063222#33063222\r\n//https://stackoverflow.com/questions/17130395/real-mouse-position-in-canvas\r\n//        const scale = this.refs.scale;\r\n//        scale.classList.add(\"scaleAnimation:hover\");\r\n\r\n        this.setState(prevState => {\r\n\r\n           return {\r\n    //           x: prevState.x + (newX - (this.state.width/2))/this.state.scale,\r\n    x: (clientX.subtract(rectLeft)).divide(rectRight.subtract(rectLeft),20, HALF_UP).multiply(canvasWidth),\r\n\r\n           y: prevState.y + (newY - (this.state.height/2))/this.state.scale,\r\n\r\n\r\n\r\n           i: prevState.i+=10,\r\n           scale: prevState.scale*2,\r\n           intro: false}\r\n        })\r\n\r\n    }\r\n\r\n    imageLoaded(){\r\n\r\n                this.setState({loaded:true,\r\n                loading: false\r\n                })\r\n    }\r\n\r\n    componentDidMount() {                               //loads image to canvas to map bitmap to image for handleClick()\r\n        let canvas = this.refs.canvas\r\n        let ctx = canvas.getContext(\"2d\")\r\n//        let ctxTwo = this.refs.canvasTwo.getContext(\"2d\")\r\n        let img = this.refs.image\r\n\r\n        img.onload = () => {\r\n//            canvas.classList.remove(\"visible\");\r\n//            ctxTwo.drawImage(img, 0, 0);\r\n//            canvas.classList.add(\"fadeOut\");\r\n\r\n//            setTimeout(function(){\r\n                ctx.drawImage(img, 0, 0);\r\n//                canvas.classList.remove(\"fadeOut\");\r\n//                canvas.classList.add(\"visible\");\r\n//            }, 500);\r\n          }\r\n      }\r\n\r\n//    removeFade() {\r\n//        let scale = this.refs.scale;\r\n//        scale.classList.remove('scaleAnimation');\r\n//        console.log(\"hit!\");\r\n//    }\r\n\r\n    render() {\r\n        var url = \"http://localhost:8080/mandelbrot?\" +\r\n                        \"width=\" + this.state.width +\r\n                        \"&height=\" + this.state.height +\r\n                        \"&x=\" + this.state.x +\r\n                        \"&y=\" + this.state.y +\r\n                        \"&scale=\" + this.state.scale +\r\n                        \"&i=\" + this.state.i;\r\n\r\n    console.log(url);\r\n        return(\r\n\r\n    <React.Fragment>\r\n\r\n\r\n\r\n            <canvas ref=\"canvas\" className=\"center\" style={{display: 'block', zIndex: \"1\"}} width={this.state.width} height={this.state.height} onClick={this.handleClick.bind(this)}/>\r\n//            <canvas ref=\"canvasTwo\" className=\"center\" style={{display: 'block'}} width={this.state.width} height={this.state.height}/>\r\n            <img onLoad={this.imageLoaded.bind(this)} className=\"center\" ref=\"image\" src={url} alt=\"new\" style={{display: 'none'}} />;\r\n\r\n    </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Fractal;"]},"metadata":{},"sourceType":"module"}