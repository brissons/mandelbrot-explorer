{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\scott\\\\IntelliJ\\\\MandelbrotApp\\\\src\\\\Fractal.js\";\nimport React from 'react';\n\nvar bigdecimal = require(\"bigdecimal\");\n\nclass Fractal extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = e => {\n      //zooms and focuses fractal on click\n      const canvas = this.refs.canvas;\n      let rect = canvas.getBoundingClientRect(); // abs. size of element\n\n      let scaleX = canvas.width / rect.width; // relationship bitmap vs. element for X\n\n      let scaleY = canvas.height / rect.height; // relationship bitmap vs. element for Y\n\n      let newX = (e.clientX - rect.left) * scaleX; // scale mouse coordinates after they have\n\n      let newY = (e.clientY - rect.top) * scaleY; // been adjusted to be relative to element\n\n      let newXX = new bigdecimal.BigDecimal((e.clientX - rect.left) * scaleX);\n      this.setState(prevState => {\n        prevState.testx.add(newXX.subtract(new bigdecimal.BigDecimal(this.state.width / 2)));\n        return {\n          x: prevState.x + (newX - this.state.width / 2) / this.state.scale,\n          //x: prevState.x.add(newXX.subtract(new bigdecimal.BigDecimal(this.state.width/2))).divide(this.state.scale),\n          y: prevState.y + (newY - this.state.height / 2) / this.state.scale,\n          i: prevState.i += 20,\n          scale: prevState.scale * 2\n        };\n      });\n    };\n\n    this.state = {\n      width: 1280,\n      //the width of the fractal\n      height: 720,\n      //the height of the fractal\n      x: 640,\n      xtest: new bigdecimal.BigDecimal(640),\n      //the center x-coordinate of the fractal\n      y: 360,\n      //the center y-coordinate of the fractal\n      i: 50,\n      //initial number of iterations\n      scale: 1 //initial scale\n\n    };\n  }\n\n  componentDidMount() {\n    //loads image to canvas to map bitmap to image for handleClick()\n    let canvas = this.refs.canvas;\n    let ctx = canvas.getContext(\"2d\");\n    let img = this.refs.image;\n\n    img.onload = () => {\n      ctx.drawImage(img, 0, 0);\n    };\n  }\n\n  render() {\n    var url = \"http://localhost:8080/mandelbrot?\" + \"width=\" + this.state.width + \"&hight=\" + this.state.height + \"&x=\" + this.state.x + \"&y=\" + this.state.y + \"&scale=\" + this.state.scale + \"&i=\" + this.state.i;\n    console.log(url);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"centerContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: \"canvas\",\n      className: \"center\",\n      width: this.state.width,\n      height: this.state.height,\n      onClick: this.handleClick.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"img\", {\n      className: \"center\",\n      ref: \"image\",\n      src: url,\n      alt: \"new\",\n      style: {\n        display: 'none'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default Fractal;","map":{"version":3,"sources":["C:/Users/scott/IntelliJ/MandelbrotApp/src/Fractal.js"],"names":["React","bigdecimal","require","Fractal","Component","constructor","props","handleClick","e","canvas","refs","rect","getBoundingClientRect","scaleX","width","scaleY","height","newX","clientX","left","newY","clientY","top","newXX","BigDecimal","setState","prevState","testx","add","subtract","state","x","scale","y","i","xtest","componentDidMount","ctx","getContext","img","image","onload","drawImage","render","url","console","log","bind","display"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nvar bigdecimal = require(\"bigdecimal\");\r\n\r\nclass Fractal extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            width: 1280,        //the width of the fractal\r\n            height: 720,        //the height of the fractal\r\n            x: 640,\r\n            xtest: new bigdecimal.BigDecimal(640),             //the center x-coordinate of the fractal\r\n            y: 360,             //the center y-coordinate of the fractal\r\n            i: 50,              //initial number of iterations\r\n            scale: 1            //initial scale\r\n        };\r\n    }\r\n\r\n    handleClick = e => {                                //zooms and focuses fractal on click\r\n        const canvas = this.refs.canvas;\r\n        let rect = canvas.getBoundingClientRect();      // abs. size of element\r\n        let scaleX = canvas.width / rect.width;         // relationship bitmap vs. element for X\r\n        let scaleY = canvas.height / rect.height;       // relationship bitmap vs. element for Y\r\n        let newX = (e.clientX - rect.left) * scaleX;    // scale mouse coordinates after they have\r\n        let newY = (e.clientY - rect.top) * scaleY;     // been adjusted to be relative to element\r\n\r\n\r\n        let newXX =  new bigdecimal.BigDecimal((e.clientX - rect.left) * scaleX);\r\n\r\n        this.setState(prevState => {\r\n                   prevState.testx.add(newXX.subtract(new bigdecimal.BigDecimal(this.state.width/2)));\r\n\r\n           return {\r\n           x: prevState.x + (newX - (this.state.width/2))/this.state.scale,\r\n           //x: prevState.x.add(newXX.subtract(new bigdecimal.BigDecimal(this.state.width/2))).divide(this.state.scale),\r\n           y: prevState.y + (newY - (this.state.height/2))/this.state.scale,\r\n           i: prevState.i+=20,\r\n           scale: prevState.scale*2}\r\n        })\r\n    }\r\n\r\n    componentDidMount() {                               //loads image to canvas to map bitmap to image for handleClick()\r\n        let canvas = this.refs.canvas\r\n        let ctx = canvas.getContext(\"2d\")\r\n        let img = this.refs.image\r\n\r\n        img.onload = () => {\r\n              ctx.drawImage(img, 0, 0)\r\n          }\r\n      }\r\n\r\n    render() {\r\n        var url = \"http://localhost:8080/mandelbrot?\" +\r\n                        \"width=\" + this.state.width +\r\n                        \"&hight=\" + this.state.height +\r\n                        \"&x=\" + this.state.x +\r\n                        \"&y=\" + this.state.y +\r\n                        \"&scale=\" + this.state.scale +\r\n                        \"&i=\" + this.state.i;\r\n\r\n        console.log(url);\r\n        return <div className=\"centerContainer\">\r\n                <canvas ref=\"canvas\" className=\"center\" width={this.state.width} height={this.state.height} onClick={this.handleClick.bind(this)}/>\r\n                <img className=\"center\" ref=\"image\" src={url} alt=\"new\" style={{display: 'none'}} />\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default Fractal;"]},"metadata":{},"sourceType":"module"}