{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\scott\\\\IntelliJ\\\\MandelbrotApp\\\\src\\\\Fractal.js\";\nimport React, { Component } from 'react';\n\nclass Fractal extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = e => {\n      e.persist();\n      let canvas = this.refs.canvas;\n      let rect = canvas.getBoundingClientRect(); // abs. size of element\n\n      let scaleX = canvas.width / rect.width; // relationship bitmap vs. element for X\n\n      let scaleY = canvas.height / rect.height; // relationship bitmap vs. element for Y\n\n      let newX = (e.clientX - rect.left) * scaleX; // scale mouse coordinates after they have\n\n      let newY = (e.clientY - rect.top) * scaleY; // been adjusted to be relative to element\n\n      this.setState(prevState => {\n        return {\n          x: prevState.x + (newX - this.state.width / 2) / this.state.scale,\n          y: prevState.y + (newY - this.state.height / 2) / this.state.scale,\n          iterations: prevState.iterations += 20,\n          scale: prevState.scale * 2\n        };\n      });\n    };\n\n    this.state = {\n      width: this.props.width,\n      height: this.props.height,\n      x: this.props.width / 2,\n      y: this.props.height / 2,\n      iterations: 50,\n      scale: 1\n    };\n  }\n\n  componentDidMount() {\n    const canvas = this.refs.canvas;\n    const ctx = canvas.getContext(\"2d\");\n    const img = this.refs.image;\n\n    img.onload = () => {\n      ctx.drawImage(img, 0, 0);\n    };\n  }\n\n  render() {\n    var url = \"http://localhost:8080/mandelbrot?x=\" + this.state.x + \"&y=\" + this.state.y + \"&scale=\" + this.state.scale + \"&iterations=\" + this.state.iterations;\n    console.log(url);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"centerContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: \"canvas\",\n      className: \"center\",\n      width: 1200,\n      height: 800,\n      onClick: this.handleClick.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"img\", {\n      className: \"center\",\n      ref: \"image\",\n      src: url,\n      alt: \"new\",\n      style: {\n        display: 'none'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nexport default Fractal;","map":{"version":3,"sources":["C:/Users/scott/IntelliJ/MandelbrotApp/src/Fractal.js"],"names":["React","Component","Fractal","constructor","props","handleClick","e","persist","canvas","refs","rect","getBoundingClientRect","scaleX","width","scaleY","height","newX","clientX","left","newY","clientY","top","setState","prevState","x","state","scale","y","iterations","componentDidMount","ctx","getContext","img","image","onload","drawImage","render","url","console","log","bind","display"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Fractal extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            width: this.props.width,\r\n            height: this.props.height,\r\n            x: this.props.width/2,\r\n            y: this.props.height/2,\r\n            iterations: 50,\r\n            scale: 1\r\n        };\r\n    }\r\n\r\n    handleClick = e => {\r\n        e.persist();\r\n\r\n        let canvas = this.refs.canvas;\r\n        let rect = canvas.getBoundingClientRect();      // abs. size of element\r\n        let scaleX = canvas.width / rect.width;         // relationship bitmap vs. element for X\r\n        let scaleY = canvas.height / rect.height;       // relationship bitmap vs. element for Y\r\n        let newX = (e.clientX - rect.left) * scaleX;    // scale mouse coordinates after they have\r\n        let newY = (e.clientY - rect.top) * scaleY;     // been adjusted to be relative to element\r\n\r\n        this.setState(prevState => {\r\n           return {\r\n           x: prevState.x + (newX - (this.state.width/2))/this.state.scale,\r\n           y: prevState.y + (newY - (this.state.height/2))/this.state.scale,\r\n           iterations: prevState.iterations+=20,\r\n           scale: prevState.scale*2}\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        const canvas = this.refs.canvas\r\n        const ctx = canvas.getContext(\"2d\")\r\n        const img = this.refs.image\r\n\r\n        img.onload = () => {\r\n              ctx.drawImage(img, 0, 0)\r\n          }\r\n      }\r\n\r\n    render() {\r\n        var url = \"http://localhost:8080/mandelbrot?x=\" + this.state.x + \"&y=\" + this.state.y + \"&scale=\" + this.state.scale + \"&iterations=\" + this.state.iterations;\r\n        console.log(url);\r\n\r\n        return <div className=\"centerContainer\">\r\n            <canvas ref=\"canvas\" className=\"center\" width={1200} height={800} onClick={this.handleClick.bind(this)}/>\r\n            <img className=\"center\" ref=\"image\" src={url} alt=\"new\" style={{display: 'none'}} />\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default Fractal;"]},"metadata":{},"sourceType":"module"}