{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getFillSize;\n\nvar _domUtils = require(\"./dom-utils\");\n\nfunction _sliceIterator(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _slicedToArray(arr, i) {\n  if (Array.isArray(arr)) {\n    return arr;\n  } else if (Symbol.iterator in Object(arr)) {\n    return _sliceIterator(arr, i);\n  } else {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n  }\n} // Determine the font-size to set on the element `el` that will\n// allow the first child of that element to fill the maximum height\n// and width without causing overflow\n\n\nfunction getFillSize(el, minFontSize, maxFontSize) {\n  var widthOnly = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var factor = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1; // Make an initial guess at font-size that fits width\n\n  var fontSize = Math.min(Math.max(Math.min(Number(el.offsetWidth) / (factor * 10), maxFontSize), minFontSize));\n  var step = 1;\n  var complete;\n\n  while (!complete) {\n    el.style.fontSize = \"\".concat(fontSize, \"px\");\n\n    var _getOverflow = (0, _domUtils.getOverflow)(el),\n        _getOverflow2 = _slicedToArray(_getOverflow, 2),\n        overflowWidth = _getOverflow2[0],\n        overflowHeight = _getOverflow2[1];\n\n    if (!widthOnly && (overflowHeight || overflowWidth)) {\n      if (fontSize <= minFontSize) {\n        fontSize = minFontSize;\n        complete = true;\n      } else {\n        fontSize -= step;\n        complete = true;\n      }\n    } else if (widthOnly && overflowWidth) {\n      fontSize -= step;\n      complete = true;\n    } else if (fontSize >= maxFontSize) {\n      fontSize = maxFontSize;\n      complete = true;\n    } else if (!complete) {\n      fontSize += step;\n    }\n  }\n\n  return fontSize;\n}\n/* eslint-enable no-param-reassign */","map":null,"metadata":{},"sourceType":"script"}