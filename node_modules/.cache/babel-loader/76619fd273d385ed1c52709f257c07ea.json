{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\scott\\\\IntelliJ\\\\MandelbrotApp\\\\src\\\\Fractal.js\";\nimport React from 'react';\nimport './styles.css';\nimport Overlay from \"./Overlay.js\";\nimport Scale from \"./Scale.js\";\nimport LoadingOverlay from 'react-loading-overlay';\nimport { FlagSpinner } from \"react-spinners-kit\";\n\nvar bigdecimal = require(\"bigdecimal\");\n\nvar HALF_UP = bigdecimal.RoundingMode.HALF_UP();\n\nclass Fractal extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = e => {\n      //zooms and focuses fractal on click\n      const canvas = this.refs.canvas;\n      let rect = canvas.getBoundingClientRect(); // abs. size of element\n\n      let realWidth = rect.width / rect.height < 4 / 3 ? rect.height * 4 / 3 : rect.height;\n      let realHeight = rect.height;\n\n      if (rect.width / rect.height < 4 / 3) {//to compensate for object-fit: cover\n        //            realWidth = (rect.height*4)/3;\n        //            realHeight = rect.height;\n      } else {\n        realHeight = rect.width * 3 / 4;\n        realWidth = rect.width;\n      }\n\n      let scaleX = canvas.width / realWidth;\n      let scaleY = canvas.height / realHeight;\n      let newX = (e.clientX - rect.width / 2 + realWidth / 2 - rect.left) * scaleX; //works!\n\n      let newY = (e.clientY - rect.height / 2 + realHeight / 2 - rect.top) * scaleY;\n      this.setState(prevState => {\n        return {\n          x: prevState.x + (newX - this.state.width / 2.0) / this.state.scale,\n          y: prevState.y + (newY - this.state.height / 2.0) / this.state.scale,\n          i: prevState.i += 10,\n          scale: prevState.scale * 2,\n          intro: false\n        };\n      });\n    };\n\n    this.state = {\n      width: 1920,\n      //the width of the fractal\n      height: 1440,\n      //the height of the fractal\n      //            x: new bigdecimal.BigDecimal(960 - 25),\n      //            y: new bigdecimal.BigDecimal(720),\n      x: 960 - 25,\n      y: 720,\n      i: 180,\n      //initial number of iterations\n      scale: 1,\n      //initial scale\n      intro: true,\n      loading: true,\n      loaded: false\n    };\n  }\n\n  imageLoaded() {\n    this.setState({\n      loaded: true,\n      loading: false\n    });\n  }\n\n  componentDidMount() {\n    //loads image to canvas to map bitmap to image for handleClick()\n    let canvas = this.refs.canvas;\n    let ctx = canvas.getContext(\"2d\"); //        let ctxTwo = this.refs.canvasTwo.getContext(\"2d\")\n\n    let img = this.refs.image;\n\n    img.onload = () => {\n      //            canvas.classList.remove(\"visible\");\n      //            ctxTwo.drawImage(img, 0, 0);\n      //            canvas.classList.add(\"fadeOut\");\n      //            setTimeout(function(){\n      ctx.drawImage(img, 0, 0); //                canvas.classList.remove(\"fadeOut\");\n      //                canvas.classList.add(\"visible\");\n      //            }, 500);\n    };\n  } //    removeFade() {\n  //        let scale = this.refs.scale;\n  //        scale.classList.remove('scaleAnimation');\n  //        console.log(\"hit!\");\n  //    }\n\n\n  render() {\n    var url = \"http://localhost:8080/mandelbrot?\" + \"width=\" + this.state.width + \"&height=\" + this.state.height + \"&x=\" + this.state.x + \"&y=\" + this.state.y + \"&scale=\" + this.state.scale + \"&i=\" + this.state.i; //    console.log(url);\n\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: \"canvas\",\n      className: \"center\",\n      style: {\n        display: 'block',\n        zIndex: \"1\"\n      },\n      width: this.state.width,\n      height: this.state.height,\n      onClick: this.handleClick.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }\n    }), \"//            \", /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: \"canvasTwo\",\n      className: \"center\",\n      style: {\n        display: 'block'\n      },\n      width: this.state.width,\n      height: this.state.height,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"img\", {\n      onLoad: this.imageLoaded.bind(this),\n      className: \"center\",\n      ref: \"image\",\n      src: url,\n      alt: \"new\",\n      style: {\n        display: 'none'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }\n    }), \";\");\n  }\n\n}\n\nexport default Fractal;","map":{"version":3,"sources":["C:/Users/scott/IntelliJ/MandelbrotApp/src/Fractal.js"],"names":["React","Overlay","Scale","LoadingOverlay","FlagSpinner","bigdecimal","require","HALF_UP","RoundingMode","Fractal","Component","constructor","props","handleClick","e","canvas","refs","rect","getBoundingClientRect","realWidth","width","height","realHeight","scaleX","scaleY","newX","clientX","left","newY","clientY","top","setState","prevState","x","state","scale","y","i","intro","loading","loaded","imageLoaded","componentDidMount","ctx","getContext","img","image","onload","drawImage","render","url","display","zIndex","bind"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport './styles.css'\r\nimport Overlay from \"./Overlay.js\"\r\nimport Scale from \"./Scale.js\"\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport { FlagSpinner } from \"react-spinners-kit\";\r\n\r\nvar bigdecimal = require(\"bigdecimal\");\r\nvar HALF_UP = bigdecimal.RoundingMode.HALF_UP();\r\n\r\nclass Fractal extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            width: 1920,        //the width of the fractal\r\n            height: 1440,        //the height of the fractal\r\n//            x: new bigdecimal.BigDecimal(960 - 25),\r\n//            y: new bigdecimal.BigDecimal(720),\r\n            x: 960 - 25,\r\n            y: 720,\r\n            i: 180,              //initial number of iterations\r\n            scale: 1,            //initial scale\r\n            intro: true,\r\n            loading: true,\r\n            loaded: false\r\n        };\r\n    }\r\n\r\n    handleClick = e => {                                //zooms and focuses fractal on click\r\n        const canvas = this.refs.canvas;\r\n        let rect = canvas.getBoundingClientRect();      // abs. size of element\r\n\r\n        let realWidth = (rect.width/rect.height < 4/3) ? (rect.height*4)/3 : rect.height;\r\n        let realHeight = rect.height;\r\n\r\n        if(rect.width/rect.height < 4/3) {              //to compensate for object-fit: cover\r\n//            realWidth = (rect.height*4)/3;\r\n//            realHeight = rect.height;\r\n        }\r\n        else {\r\n            realHeight = (rect.width*3)/4;\r\n            realWidth = rect.width;\r\n        }\r\n\r\n        let scaleX = canvas.width / realWidth;\r\n        let scaleY = canvas.height / realHeight;\r\n        let newX = (e.clientX - rect.width/2 + realWidth/2 - rect.left) * scaleX; //works!\r\n        let newY = (e.clientY - rect.height/2 + realHeight/2 - rect.top) * scaleY;\r\n\r\n        this.setState(prevState => {\r\n\r\n           return {\r\n            x: prevState.x + (newX - (this.state.width/2.0))/this.state.scale,\r\n            y: prevState.y + (newY - (this.state.height/2.0))/this.state.scale,\r\n           i: prevState.i+=10,\r\n           scale: prevState.scale*2,\r\n           intro: false}\r\n        })\r\n\r\n    }\r\n\r\n    imageLoaded(){\r\n\r\n                this.setState({loaded:true,\r\n                loading: false\r\n                })\r\n    }\r\n\r\n    componentDidMount() {                               //loads image to canvas to map bitmap to image for handleClick()\r\n        let canvas = this.refs.canvas\r\n        let ctx = canvas.getContext(\"2d\")\r\n//        let ctxTwo = this.refs.canvasTwo.getContext(\"2d\")\r\n        let img = this.refs.image\r\n\r\n        img.onload = () => {\r\n//            canvas.classList.remove(\"visible\");\r\n//            ctxTwo.drawImage(img, 0, 0);\r\n//            canvas.classList.add(\"fadeOut\");\r\n\r\n//            setTimeout(function(){\r\n                ctx.drawImage(img, 0, 0);\r\n//                canvas.classList.remove(\"fadeOut\");\r\n//                canvas.classList.add(\"visible\");\r\n//            }, 500);\r\n          }\r\n      }\r\n\r\n//    removeFade() {\r\n//        let scale = this.refs.scale;\r\n//        scale.classList.remove('scaleAnimation');\r\n//        console.log(\"hit!\");\r\n//    }\r\n\r\n    render() {\r\n        var url = \"http://localhost:8080/mandelbrot?\" +\r\n                        \"width=\" + this.state.width +\r\n                        \"&height=\" + this.state.height +\r\n                        \"&x=\" + this.state.x +\r\n                        \"&y=\" + this.state.y +\r\n                        \"&scale=\" + this.state.scale +\r\n                        \"&i=\" + this.state.i;\r\n\r\n//    console.log(url);\r\n        return(\r\n\r\n    <React.Fragment>\r\n\r\n\r\n\r\n            <canvas ref=\"canvas\" className=\"center\" style={{display: 'block', zIndex: \"1\"}} width={this.state.width} height={this.state.height} onClick={this.handleClick.bind(this)}/>\r\n//            <canvas ref=\"canvasTwo\" className=\"center\" style={{display: 'block'}} width={this.state.width} height={this.state.height}/>\r\n            <img onLoad={this.imageLoaded.bind(this)} className=\"center\" ref=\"image\" src={url} alt=\"new\" style={{display: 'none'}} />;\r\n\r\n    </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Fractal;"]},"metadata":{},"sourceType":"module"}