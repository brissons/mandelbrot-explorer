{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\scott\\\\IntelliJ\\\\MandelbrotApp\\\\src\\\\Fractal.js\";\nimport React from 'react';\nimport './styles.css';\nimport LoadingOverlay from 'react-loading-overlay';\nimport SquareLoader from 'react-spinners/SquareLoader';\nimport Overlay from \"./Overlay.js\";\n\nvar bigdecimal = require(\"bigdecimal\");\n\nvar Blur = require('react-blur').default;\n\nclass Fractal extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = e => {\n      //zooms and focuses fractal on click\n      const canvas = this.refs.canvas;\n      let rect = canvas.getBoundingClientRect(); // abs. size of element\n\n      let scaleX = new bigdecimal.BigDecimal(canvas.width / rect.width); // relationship bitmap vs. element for X\n\n      let scaleY = new bigdecimal.BigDecimal(canvas.height / rect.height); // relationship bitmap vs. element for Y\n      //let newX = (e.clientX - rect.left) * scaleX;    // scale mouse coordinates after they have\n      //let newY = (e.clientY - rect.top) * scaleY;     // been adjusted to be relative to element\n\n      let newX = new bigdecimal.BigDecimal(e.clientX - rect.left).multiply(scaleX);\n      let newY = new bigdecimal.BigDecimal(e.clientY - rect.top).multiply(scaleY);\n      this.setState(prevState => {\n        return {\n          //x: prevState.x + (newX - (this.state.width/2))/this.state.scale,\n          x: prevState.x.add(newX.subtract(new bigdecimal.BigDecimal(this.state.width / 2.0)).divide(new bigdecimal.BigDecimal(this.state.scale))),\n          //y: prevState.y + (newY - (this.state.height/2))/this.state.scale,\n          y: prevState.y.add(newY.subtract(new bigdecimal.BigDecimal(this.state.height / 2.0)).divide(new bigdecimal.BigDecimal(this.state.scale))),\n          i: prevState.i += 20,\n          scale: prevState.scale * 2\n        };\n      });\n    };\n\n    this.state = {\n      width: 1920,\n      //the width of the fractal\n      height: 1440,\n      //the height of the fractal\n      x: new bigdecimal.BigDecimal(960),\n      y: new bigdecimal.BigDecimal(720),\n      i: 100,\n      //initial number of iterations\n      scale: 1 //initial scale\n\n    };\n  }\n\n  componentDidMount() {\n    //loads image to canvas to map bitmap to image for handleClick()\n    let canvas = this.refs.canvas;\n    let ctx = canvas.getContext(\"2d\");\n    let ctxTwo = this.refs.canvasTwo.getContext(\"2d\");\n    let img = this.refs.image;\n\n    img.onload = () => {\n      canvas.classList.remove(\"visible\");\n      ctxTwo.drawImage(img, 0, 0);\n      canvas.classList.add(\"fadeOut\");\n      setTimeout(function () {\n        ctx.drawImage(img, 0, 0);\n        canvas.classList.remove(\"fadeOut\");\n        canvas.classList.add(\"visible\");\n      }, 500);\n    };\n  }\n\n  render() {\n    var url = \"http://localhost:8080/mandelbrot?\" + \"width=\" + this.state.width + \"&height=\" + this.state.height + \"&x=\" + this.state.x + \"&y=\" + this.state.y + \"&scale=\" + this.state.scale + \"&i=\" + this.state.i;\n    var fractalImg = /*#__PURE__*/React.createElement(\"img\", {\n      className: \"center\",\n      ref: \"image\",\n      src: url,\n      alt: \"new\",\n      style: {\n        display: 'none'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 26\n      }\n    });\n    return (\n      /*#__PURE__*/\n      //        <LoadingOverlay\n      //          active={\"true\"}\n      //          spinner = {<SquareLoader/>}\n      //          >\n      React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 9\n        }\n      }, true && /*#__PURE__*/React.createElement(Overlay, {\n        url: url,\n        blur: 50,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 22\n        }\n      }), /*#__PURE__*/React.createElement(\"canvas\", {\n        ref: \"canvas\",\n        className: \"center\",\n        style: {\n          display: 'block',\n          zIndex: \"1\"\n        },\n        width: this.state.width,\n        height: this.state.height,\n        onClick: this.handleClick.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"canvas\", {\n        ref: \"canvasTwo\",\n        className: \"center\",\n        style: {\n          display: 'block'\n        },\n        width: this.state.width,\n        height: this.state.height,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }\n      }), fractalImg)) //        </LoadingOverlay>\n\n    );\n  }\n\n}\n\nexport default Fractal;","map":{"version":3,"sources":["C:/Users/scott/IntelliJ/MandelbrotApp/src/Fractal.js"],"names":["React","LoadingOverlay","SquareLoader","Overlay","bigdecimal","require","Blur","default","Fractal","Component","constructor","props","handleClick","e","canvas","refs","rect","getBoundingClientRect","scaleX","BigDecimal","width","scaleY","height","newX","clientX","left","multiply","newY","clientY","top","setState","prevState","x","add","subtract","state","divide","scale","y","i","componentDidMount","ctx","getContext","ctxTwo","canvasTwo","img","image","onload","classList","remove","drawImage","setTimeout","render","url","fractalImg","display","zIndex","bind"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport './styles.css'\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport SquareLoader from 'react-spinners/SquareLoader'\r\nimport Overlay from \"./Overlay.js\"\r\n\r\nvar bigdecimal = require(\"bigdecimal\");\r\nvar Blur = require('react-blur').default;\r\n\r\nclass Fractal extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            width: 1920,        //the width of the fractal\r\n            height: 1440,        //the height of the fractal\r\n            x: new bigdecimal.BigDecimal(960),\r\n            y: new bigdecimal.BigDecimal(720),\r\n            i: 100,              //initial number of iterations\r\n            scale: 1            //initial scale\r\n        };\r\n    }\r\n\r\n    handleClick = e => {                                //zooms and focuses fractal on click\r\n        const canvas = this.refs.canvas;\r\n        let rect = canvas.getBoundingClientRect();      // abs. size of element\r\n        let scaleX = new bigdecimal.BigDecimal(canvas.width / rect.width);         // relationship bitmap vs. element for X\r\n        let scaleY = new bigdecimal.BigDecimal(canvas.height / rect.height);       // relationship bitmap vs. element for Y\r\n        //let newX = (e.clientX - rect.left) * scaleX;    // scale mouse coordinates after they have\r\n        //let newY = (e.clientY - rect.top) * scaleY;     // been adjusted to be relative to element\r\n        let newX = new bigdecimal.BigDecimal((e.clientX - rect.left)).multiply(scaleX);\r\n        let newY = new bigdecimal.BigDecimal((e.clientY - rect.top)).multiply(scaleY);\r\n\r\n        this.setState(prevState => {\r\n\r\n           return {\r\n           //x: prevState.x + (newX - (this.state.width/2))/this.state.scale,\r\n           x:  prevState.x.add((newX.subtract(new bigdecimal.BigDecimal(this.state.width/2.0))).divide(new bigdecimal.BigDecimal(this.state.scale))),\r\n           //y: prevState.y + (newY - (this.state.height/2))/this.state.scale,\r\n           y:  prevState.y.add((newY.subtract(new bigdecimal.BigDecimal(this.state.height/2.0))).divide(new bigdecimal.BigDecimal(this.state.scale))),\r\n           i: prevState.i+=20,\r\n           scale: prevState.scale*2}\r\n        })\r\n    }\r\n\r\n    componentDidMount() {                               //loads image to canvas to map bitmap to image for handleClick()\r\n        let canvas = this.refs.canvas\r\n        let ctx = canvas.getContext(\"2d\")\r\n        let ctxTwo = this.refs.canvasTwo.getContext(\"2d\")\r\n        let img = this.refs.image\r\n\r\n        img.onload = () => {\r\n            canvas.classList.remove(\"visible\");\r\n            ctxTwo.drawImage(img, 0, 0);\r\n            canvas.classList.add(\"fadeOut\");\r\n\r\n            setTimeout(function(){\r\n                ctx.drawImage(img, 0, 0);\r\n                canvas.classList.remove(\"fadeOut\");\r\n                canvas.classList.add(\"visible\");\r\n            }, 500);\r\n          }\r\n      }\r\n\r\n    render() {\r\n        var url = \"http://localhost:8080/mandelbrot?\" +\r\n                        \"width=\" + this.state.width +\r\n                        \"&height=\" + this.state.height +\r\n                        \"&x=\" + this.state.x +\r\n                        \"&y=\" + this.state.y +\r\n                        \"&scale=\" + this.state.scale +\r\n                        \"&i=\" + this.state.i;\r\n\r\n        var fractalImg = <img className=\"center\" ref=\"image\" src={url} alt=\"new\" style={{display: 'none'}} />;\r\n\r\n        return(\r\n//        <LoadingOverlay\r\n//          active={\"true\"}\r\n//          spinner = {<SquareLoader/>}\r\n//          >\r\n    <React.Fragment>\r\n        <div>\r\n            {true && <Overlay url={url} blur={50} />}\r\n            <canvas ref=\"canvas\" className=\"center\" style={{display: 'block', zIndex: \"1\"}} width={this.state.width} height={this.state.height} onClick={this.handleClick.bind(this)}/>\r\n            <canvas ref=\"canvasTwo\" className=\"center\" style={{display: 'block'}} width={this.state.width} height={this.state.height}/>\r\n            {fractalImg}\r\n        </div>\r\n    </React.Fragment>\r\n//        </LoadingOverlay>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Fractal;"]},"metadata":{},"sourceType":"module"}