{"ast":null,"code":"\"use strict\";\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _warning = _interopRequireDefault(require(\"warning\"));\n\nvar _shortid = require(\"shortid\");\n\nvar _shallowEqual = _interopRequireDefault(require(\"./shallow-equal\"));\n\nvar _getFillsize = _interopRequireDefault(require(\"./get-fillsize\"));\n\nvar _domUtils = require(\"./dom-utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _instanceof(left, right) {\n  if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) {\n    return right[Symbol.hasInstance](left);\n  } else {\n    return left instanceof right;\n  }\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!_instanceof(instance, Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nvar ScaleText = /*#__PURE__*/function (_Component) {\n  _inherits(ScaleText, _Component);\n\n  function ScaleText(props) {\n    var _this;\n\n    _classCallCheck(this, ScaleText);\n\n    _this = _possibleConstructorReturn(this, (ScaleText.__proto__ || Object.getPrototypeOf(ScaleText)).call(this, props));\n    _this.state = {\n      size: null\n    };\n    _this._resizing = false;\n    _this._invalidChild = false;\n    _this._mounted = false;\n\n    _this._handleResize = function () {\n      if (!_this._resizing) {\n        requestAnimationFrame(_this.handleResize.bind(_assertThisInitialized(_this)));\n      }\n\n      _this._resizing = true;\n    };\n\n    return _this;\n  }\n\n  _createClass(ScaleText, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var children = this.props.children;\n      this._mounted = true;\n      this._invalidChild = _react.default.Children.count(children) > 1;\n      (0, _warning.default)(!this._invalidChild, \"'ScaleText' expects a single node as a child, but we found\\n      \".concat(_react.default.Children.count(children), \" children instead.\\n      No scaling will be done on this subtree\"));\n\n      if (this.shouldResize()) {\n        this.resize();\n        window.addEventListener('resize', this._handleResize);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      // compare children's props for change\n      if (!(0, _shallowEqual.default)(prevProps.children.props, this.props.children.props) || prevProps.children !== this.props.children || prevProps !== this.props) {\n        this.resize();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (!this.shouldResize()) {\n        window.removeEventListener('resize', this._handleResize);\n      }\n    }\n  }, {\n    key: \"shouldResize\",\n    value: function shouldResize() {\n      return !this._invalidChild;\n    }\n  }, {\n    key: \"handleResize\",\n    value: function handleResize() {\n      this._resizing = false;\n      this.resize();\n    }\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      var _this2 = this;\n\n      var _props = this.props,\n          minFontSize = _props.minFontSize,\n          maxFontSize = _props.maxFontSize,\n          widthOnly = _props.widthOnly;\n      if (!this._mounted || !this._wrapper) return;\n\n      if (this.ruler) {\n        this.clearRuler();\n      }\n\n      this.createRuler();\n      var fontSize = (0, _getFillsize.default)(this.ruler, minFontSize || Number.NEGATIVE_INFINITY, maxFontSize || Number.POSITIVE_INFINITY, widthOnly);\n      this.setState({\n        size: parseFloat(fontSize, 10),\n        complete: true\n      }, function () {\n        _this2.clearRuler();\n      });\n    }\n  }, {\n    key: \"createRuler\",\n    value: function createRuler() {\n      // Create copy of wrapper for sizing\n      this.ruler = this._wrapper.cloneNode(true);\n      this.ruler.id = (0, _shortid.generate)();\n      (0, _domUtils.css)(this.ruler, {\n        position: 'absolute',\n        top: '0px',\n        left: 'calc(100vw * 2)',\n        width: (0, _domUtils.getStyle)(this._wrapper, 'width'),\n        height: (0, _domUtils.getStyle)(this._wrapper, 'height')\n      });\n      document.body.appendChild(this.ruler);\n    }\n  }, {\n    key: \"clearRuler\",\n    value: function clearRuler() {\n      if (this.ruler) {\n        document.body.removeChild(this.ruler);\n      }\n\n      this.ruler = null;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var fontSize = this.state.size;\n      var _props2 = this.props,\n          children = _props2.children,\n          widthOnly = _props2.widthOnly;\n      var overflowStyle = widthOnly ? {\n        overflowY: 'visible',\n        overflowX: 'hidden',\n        height: 'auto'\n      } : {\n        overflow: 'hidden'\n      };\n      var child = _react.default.isValidElement(children) ? _react.default.Children.only(children) : _react.default.createElement(\"span\", null, children);\n\n      var style = _extends({\n        fontSize: fontSize ? \"\".concat(fontSize.toFixed(2), \"px\") : 'inherit',\n        width: '100%',\n        height: '100%'\n      }, overflowStyle);\n\n      var childProps = {\n        fontSize: fontSize ? parseFloat(fontSize.toFixed(2)) : 'inherit'\n      };\n      return _react.default.createElement(\"div\", {\n        className: \"scaletext-wrapper\",\n        ref: function ref(c) {\n          _this3._wrapper = c;\n        },\n        style: style\n      }, _react.default.cloneElement(child, childProps));\n    }\n  }]);\n\n  return ScaleText;\n}(_react.Component);\n\nScaleText.propTypes = {\n  children: _propTypes.default.node.isRequired,\n  minFontSize: _propTypes.default.number.isRequired,\n  maxFontSize: _propTypes.default.number.isRequired,\n  widthOnly: _propTypes.default.bool\n};\nScaleText.defaultProps = {\n  minFontSize: Number.NEGATIVE_INFINITY,\n  maxFontSize: Number.POSITIVE_INFINITY,\n  widthOnly: false\n}; // export default ScaleText;\n\nmodule.exports = ScaleText;","map":null,"metadata":{},"sourceType":"script"}