{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getStyle = getStyle;\nexports.getOverflow = getOverflow;\nexports.hasOverflow = exports.css = exports.camelize = exports.uniqId = void 0;\n/**\n * @file utils.js\n * @description DOM utility functions\n */\n// Simple way to generate a unique id\n\nvar id = 0;\n\nvar uniqId = function uniqId() {\n  return \"uid-\".concat(Date.now(), \"-\").concat(id++);\n}; // Camelcase a dashed string, ie do-thing => doThing\n\n\nexports.uniqId = uniqId;\n\nvar camelize = function camelize(str) {\n  return str.replace(/-(\\w)/g, function (s, letter) {\n    return letter.toUpperCase();\n  });\n};\n/* eslint-disable no-param-reassign, guard-for-in, no-restricted-syntax */\n// Set multiple css properties on an element `el` by\n// passing in a `style` object that defines what properties\n// to set and their value\n\n\nexports.camelize = camelize;\n\nvar css = function css(el, styles) {\n  for (var property in styles) {\n    el.style[property] = styles[property];\n  }\n};\n/* eslint-enable no-param-reassign, guard-for-in, no-restricted-syntax */\n// Get the current style property value for the given element\n\n\nexports.css = css;\n\nfunction getStyle(el, styleProp) {\n  if (el.currentStyle) {\n    return el.currentStyle[camelize(styleProp)];\n  } else if (document.defaultView && document.defaultView.getComputedStyle) {\n    return document.defaultView.getComputedStyle(el, null).getPropertyValue(styleProp);\n  }\n\n  return el.style[camelize(styleProp)];\n}\n\nfunction getOverflow(el) {\n  return [el.clientWidth < el.scrollWidth, el.clientHeight < el.scrollHeight];\n}\n\nvar hasOverflow = function hasOverflow(el) {\n  return getOverflow(el).some(function (v) {\n    return v === true;\n  });\n};\n\nexports.hasOverflow = hasOverflow;","map":null,"metadata":{},"sourceType":"script"}