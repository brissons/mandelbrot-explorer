{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\scott\\\\IntelliJ\\\\MandelbrotApp\\\\src\\\\Fractal.js\";\nimport React from 'react';\nimport './styles.css';\nimport Overlay from \"./Overlay.js\";\nimport Scale from \"./Scale.js\";\nimport LoadingOverlay from 'react-loading-overlay';\nimport { FlagSpinner } from \"react-spinners-kit\";\n\nvar bigdecimal = require(\"bigdecimal\");\n\nvar HALF_UP = bigdecimal.RoundingMode.HALF_UP();\n\nclass Fractal extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = e => {\n      //zooms and focuses fractal on click\n      const canvas = this.refs.canvas;\n      let rect = canvas.getBoundingClientRect(); // abs. size of element\n      //        let rectWidth = new bigdecimal.BigDecimal(rect.width);\n      //        let rectHeight = new bigdecimal.BigDecimal(rect.height);\n      //        let rectLeft = new bigdecimal.BigDecimal(rect.left);\n      //        let rectRight = new bigdecimal.BigDecimal(rect.right);\n      //        let rectTop = new bigdecimal.BigDecimal(rect.top);\n      //        let clientX = new bigdecimal.BigDecimal(e.clientX);\n      //        let clientY = new bigdecimal.BigDecimal(e.clientY);\n      //        let canvasWidth = new bigdecimal.BigDecimal(canvas.width);\n      //        let scaleX = new bigdecimal.BigDecimal(canvas.width).divide(rectWidth,20, HALF_UP);         // relationship bitmap vs. element for X\n      //        let scaleY = new bigdecimal.BigDecimal(canvas.height).divide(rectHeight,20, HALF_UP);       // relationship bitmap vs. element for Y\n      //        let scaleX = canvas.width / rect.width;    // relationship bitmap vs. element for X\n      //        let scaleY = canvas.height / rect.height;\n      //let testx = 0;\n      //let actually = 0;\n      //let testy = 0;\n      //        if(rect.width/rect.height < 4/3) {\n      //        console.log(\"hit\");\n      //            actually = (rect.width*3)/4;\n      //            testy = actually + rect.height/2;\n      //        }\n      //\n      //        let scaleTest = canvas.height / actually;\n      //console.log(e.clientY);\n      //        let newX = (e.clientX - rect.left) * scaleX;    // scale mouse coordinates after they have\n      //        let newY = (e.clientY - rect.height/2 + actually/2  - rect.top) * scaleTest;     // been adjusted to be relative to element\n\n      let realWidth = 0;\n      let realHeight = 0;\n      let scaleX = 0;\n      let scaleY = 0;\n\n      if (rect.width / rect.height < 4 / 3) {\n        console.log(\"cutoff X\");\n        realWidth = rect.height * 4 / 3;\n        realHeight = rect.height;\n      } else {\n        console.log(\"cutoff Y\");\n        realHeight = rect.width * 3 / 4;\n        realWidth = rect.width;\n      }\n\n      scaleX = canvas.width / realWidth;\n      scaleY = canvas.height / realHeight;\n      let newX = (e.clientX - rect.width / 2 + realWidth / 2 - rect.left) * scaleX; //works!\n\n      let newY = (e.clientY - rect.height / 2 + realHeight / 2 - rect.top) * scaleY;\n      this.setState(prevState => {\n        return {\n          x: prevState.x + (newX - this.state.width / 2.0) / this.state.scale,\n          y: prevState.y + (newY - this.state.height / 2.0) / this.state.scale,\n          i: prevState.i += 10,\n          scale: prevState.scale * 2,\n          intro: false\n        };\n      });\n    };\n\n    this.state = {\n      width: 1920,\n      //the width of the fractal\n      height: 1440,\n      //the height of the fractal\n      //            x: new bigdecimal.BigDecimal(960 - 25),\n      //            y: new bigdecimal.BigDecimal(720),\n      x: 960 - 25,\n      y: 720,\n      i: 180,\n      //initial number of iterations\n      scale: 1,\n      //initial scale\n      intro: true,\n      loading: true,\n      loaded: false\n    };\n  }\n\n  imageLoaded() {\n    this.setState({\n      loaded: true,\n      loading: false\n    });\n  }\n\n  componentDidMount() {\n    //loads image to canvas to map bitmap to image for handleClick()\n    let canvas = this.refs.canvas;\n    let ctx = canvas.getContext(\"2d\"); //        let ctxTwo = this.refs.canvasTwo.getContext(\"2d\")\n\n    let img = this.refs.image;\n\n    img.onload = () => {\n      //            canvas.classList.remove(\"visible\");\n      //            ctxTwo.drawImage(img, 0, 0);\n      //            canvas.classList.add(\"fadeOut\");\n      //            setTimeout(function(){\n      ctx.drawImage(img, 0, 0); //                canvas.classList.remove(\"fadeOut\");\n      //                canvas.classList.add(\"visible\");\n      //            }, 500);\n    };\n  } //    removeFade() {\n  //        let scale = this.refs.scale;\n  //        scale.classList.remove('scaleAnimation');\n  //        console.log(\"hit!\");\n  //    }\n\n\n  render() {\n    var url = \"http://localhost:8080/mandelbrot?\" + \"width=\" + this.state.width + \"&height=\" + this.state.height + \"&x=\" + this.state.x + \"&y=\" + this.state.y + \"&scale=\" + this.state.scale + \"&i=\" + this.state.i; //    console.log(url);\n\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: \"canvas\",\n      className: \"center\",\n      style: {\n        display: 'block',\n        zIndex: \"1\"\n      },\n      width: this.state.width,\n      height: this.state.height,\n      onClick: this.handleClick.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 13\n      }\n    }), \"//            \", /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: \"canvasTwo\",\n      className: \"center\",\n      style: {\n        display: 'block'\n      },\n      width: this.state.width,\n      height: this.state.height,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"img\", {\n      onLoad: this.imageLoaded.bind(this),\n      className: \"center\",\n      ref: \"image\",\n      src: url,\n      alt: \"new\",\n      style: {\n        display: 'none'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }\n    }), \";\");\n  }\n\n}\n\nexport default Fractal;","map":{"version":3,"sources":["C:/Users/scott/IntelliJ/MandelbrotApp/src/Fractal.js"],"names":["React","Overlay","Scale","LoadingOverlay","FlagSpinner","bigdecimal","require","HALF_UP","RoundingMode","Fractal","Component","constructor","props","handleClick","e","canvas","refs","rect","getBoundingClientRect","realWidth","realHeight","scaleX","scaleY","width","height","console","log","newX","clientX","left","newY","clientY","top","setState","prevState","x","state","scale","y","i","intro","loading","loaded","imageLoaded","componentDidMount","ctx","getContext","img","image","onload","drawImage","render","url","display","zIndex","bind"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport './styles.css'\r\nimport Overlay from \"./Overlay.js\"\r\nimport Scale from \"./Scale.js\"\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport { FlagSpinner } from \"react-spinners-kit\";\r\n\r\nvar bigdecimal = require(\"bigdecimal\");\r\nvar HALF_UP = bigdecimal.RoundingMode.HALF_UP();\r\n\r\nclass Fractal extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            width: 1920,        //the width of the fractal\r\n            height: 1440,        //the height of the fractal\r\n//            x: new bigdecimal.BigDecimal(960 - 25),\r\n//            y: new bigdecimal.BigDecimal(720),\r\n            x: 960 - 25,\r\n            y: 720,\r\n            i: 180,              //initial number of iterations\r\n            scale: 1,            //initial scale\r\n            intro: true,\r\n            loading: true,\r\n            loaded: false\r\n        };\r\n    }\r\n\r\n    handleClick = e => {                                //zooms and focuses fractal on click\r\n        const canvas = this.refs.canvas;\r\n        let rect = canvas.getBoundingClientRect();      // abs. size of element\r\n\r\n//        let rectWidth = new bigdecimal.BigDecimal(rect.width);\r\n//        let rectHeight = new bigdecimal.BigDecimal(rect.height);\r\n//        let rectLeft = new bigdecimal.BigDecimal(rect.left);\r\n//        let rectRight = new bigdecimal.BigDecimal(rect.right);\r\n//        let rectTop = new bigdecimal.BigDecimal(rect.top);\r\n//        let clientX = new bigdecimal.BigDecimal(e.clientX);\r\n//        let clientY = new bigdecimal.BigDecimal(e.clientY);\r\n//        let canvasWidth = new bigdecimal.BigDecimal(canvas.width);\r\n\r\n//        let scaleX = new bigdecimal.BigDecimal(canvas.width).divide(rectWidth,20, HALF_UP);         // relationship bitmap vs. element for X\r\n//        let scaleY = new bigdecimal.BigDecimal(canvas.height).divide(rectHeight,20, HALF_UP);       // relationship bitmap vs. element for Y\r\n\r\n//        let scaleX = canvas.width / rect.width;    // relationship bitmap vs. element for X\r\n//        let scaleY = canvas.height / rect.height;\r\n\r\n//let testx = 0;\r\n//let actually = 0;\r\n//let testy = 0;\r\n//        if(rect.width/rect.height < 4/3) {\r\n//        console.log(\"hit\");\r\n//            actually = (rect.width*3)/4;\r\n//            testy = actually + rect.height/2;\r\n//        }\r\n//\r\n//        let scaleTest = canvas.height / actually;\r\n//console.log(e.clientY);\r\n//        let newX = (e.clientX - rect.left) * scaleX;    // scale mouse coordinates after they have\r\n//        let newY = (e.clientY - rect.height/2 + actually/2  - rect.top) * scaleTest;     // been adjusted to be relative to element\r\n\r\n        let realWidth = 0;\r\n        let realHeight = 0;\r\n        let scaleX = 0;\r\n        let scaleY = 0;\r\n\r\n        if(rect.width/rect.height < 4/3) {\r\n            console.log(\"cutoff X\");\r\n            realWidth = (rect.height*4)/3;\r\n            realHeight = rect.height;\r\n        }\r\n        else {\r\n            console.log(\"cutoff Y\");\r\n            realHeight = (rect.width*3)/4;\r\n            realWidth = rect.width;\r\n        }\r\n\r\n        scaleX = canvas.width / realWidth;\r\n        scaleY = canvas.height / realHeight;\r\n        let newX = (e.clientX - rect.width/2 + realWidth/2 - rect.left) * scaleX; //works!\r\n        let newY = (e.clientY - rect.height/2 + realHeight/2 - rect.top) * scaleY;\r\n\r\n        this.setState(prevState => {\r\n\r\n           return {\r\n            x: prevState.x + (newX - (this.state.width/2.0))/this.state.scale,\r\n            y: prevState.y + (newY - (this.state.height/2.0))/this.state.scale,\r\n           i: prevState.i+=10,\r\n           scale: prevState.scale*2,\r\n           intro: false}\r\n        })\r\n\r\n    }\r\n\r\n    imageLoaded(){\r\n\r\n                this.setState({loaded:true,\r\n                loading: false\r\n                })\r\n    }\r\n\r\n    componentDidMount() {                               //loads image to canvas to map bitmap to image for handleClick()\r\n        let canvas = this.refs.canvas\r\n        let ctx = canvas.getContext(\"2d\")\r\n//        let ctxTwo = this.refs.canvasTwo.getContext(\"2d\")\r\n        let img = this.refs.image\r\n\r\n        img.onload = () => {\r\n//            canvas.classList.remove(\"visible\");\r\n//            ctxTwo.drawImage(img, 0, 0);\r\n//            canvas.classList.add(\"fadeOut\");\r\n\r\n//            setTimeout(function(){\r\n                ctx.drawImage(img, 0, 0);\r\n//                canvas.classList.remove(\"fadeOut\");\r\n//                canvas.classList.add(\"visible\");\r\n//            }, 500);\r\n          }\r\n      }\r\n\r\n//    removeFade() {\r\n//        let scale = this.refs.scale;\r\n//        scale.classList.remove('scaleAnimation');\r\n//        console.log(\"hit!\");\r\n//    }\r\n\r\n    render() {\r\n        var url = \"http://localhost:8080/mandelbrot?\" +\r\n                        \"width=\" + this.state.width +\r\n                        \"&height=\" + this.state.height +\r\n                        \"&x=\" + this.state.x +\r\n                        \"&y=\" + this.state.y +\r\n                        \"&scale=\" + this.state.scale +\r\n                        \"&i=\" + this.state.i;\r\n\r\n//    console.log(url);\r\n        return(\r\n\r\n    <React.Fragment>\r\n\r\n\r\n\r\n            <canvas ref=\"canvas\" className=\"center\" style={{display: 'block', zIndex: \"1\"}} width={this.state.width} height={this.state.height} onClick={this.handleClick.bind(this)}/>\r\n//            <canvas ref=\"canvasTwo\" className=\"center\" style={{display: 'block'}} width={this.state.width} height={this.state.height}/>\r\n            <img onLoad={this.imageLoaded.bind(this)} className=\"center\" ref=\"image\" src={url} alt=\"new\" style={{display: 'none'}} />;\r\n\r\n    </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Fractal;"]},"metadata":{},"sourceType":"module"}