{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\scott\\\\IntelliJ\\\\MandelbrotApp\\\\src\\\\index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport './styles.css';\nimport \"Fractal.js\";\n\nclass Image extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = e => {\n      e.persist();\n      const canvas = this.refs.canvas;\n      let rect = canvas.getBoundingClientRect(); // abs. size of element\n\n      let scaleX = canvas.width / rect.width; // relationship bitmap vs. element for X\n\n      let scaleY = canvas.height / rect.height; // relationship bitmap vs. element for Y\n\n      let newX = (e.clientX - rect.left) * scaleX; // scale mouse coordinates after they have\n\n      let newY = (e.clientY - rect.top) * scaleY; // been adjusted to be relative to element\n\n      this.setState(prevState => {\n        console.log(this.state.scale);\n        return {\n          x: prevState.x + (newX - 600) / this.state.scale,\n          y: prevState.y + (newY - 400) / this.state.scale,\n          iterations: prevState.iterations += 20,\n          scale: prevState.scale * 2\n        };\n      });\n      this.forceUpdate();\n    };\n\n    this.state = {\n      x: 600,\n      y: 400,\n      iterations: 50,\n      scale: 1\n    };\n  }\n\n  componentDidMount() {\n    const canvas = this.refs.canvas;\n    const ctx = canvas.getContext(\"2d\");\n    const img = this.refs.image;\n\n    img.onload = () => {\n      ctx.drawImage(img, 0, 0);\n    };\n  }\n\n  render() {\n    var url = \"http://localhost:8080/mandelbrot?x=\" + this.state.x + \"&y=\" + this.state.y + \"&scale=\" + this.state.scale + \"&iterations=\" + this.state.iterations;\n    console.log(url);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"centerContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: \"canvas\",\n      className: \"center\",\n      width: 1200,\n      height: 800,\n      onClick: this.handleClick.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"img\", {\n      className: \"center\",\n      ref: \"image\",\n      src: url,\n      alt: \"new\",\n      display: \"none\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }\n    }));\n  }\n\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render( /*#__PURE__*/React.createElement(Image, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 18\n  }\n}), rootElement);","map":{"version":3,"sources":["C:/Users/scott/IntelliJ/MandelbrotApp/src/index.js"],"names":["React","ReactDOM","Image","Component","constructor","props","handleClick","e","persist","canvas","refs","rect","getBoundingClientRect","scaleX","width","scaleY","height","newX","clientX","left","newY","clientY","top","setState","prevState","console","log","state","scale","x","y","iterations","forceUpdate","componentDidMount","ctx","getContext","img","image","onload","drawImage","render","url","bind","rootElement","document","getElementById"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport './styles.css'\nimport \"Fractal.js\"\n\nclass Image extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            x: 600,\n            y: 400,\n            iterations: 50,\n            scale: 1\n        };\n    }\n\n    handleClick = e => {\n        e.persist();\n        const canvas = this.refs.canvas;\n\n        let rect = canvas.getBoundingClientRect(); // abs. size of element\n        let scaleX = canvas.width / rect.width;    // relationship bitmap vs. element for X\n        let scaleY = canvas.height / rect.height;  // relationship bitmap vs. element for Y\n        let newX = (e.clientX - rect.left) * scaleX;   // scale mouse coordinates after they have\n        let newY = (e.clientY - rect.top) * scaleY;     // been adjusted to be relative to element\n\n        this.setState(prevState => {\n          console.log(this.state.scale);\n           return {\n           x: prevState.x + (newX - 600)/this.state.scale,\n           y: prevState.y + (newY - 400)/this.state.scale,\n           iterations: prevState.iterations+=20,\n           scale: prevState.scale*2}})\n           this.forceUpdate();\n    }\n\n    componentDidMount() {\n        const canvas = this.refs.canvas\n        const ctx = canvas.getContext(\"2d\")\n        const img = this.refs.image\n\n        img.onload = () => {\n              ctx.drawImage(img, 0, 0)\n          }\n      }\n\n    render() {\n        var url = \"http://localhost:8080/mandelbrot?x=\" + this.state.x + \"&y=\" + this.state.y + \"&scale=\" + this.state.scale + \"&iterations=\" + this.state.iterations;\n        console.log(url);\n\n        return <div className=\"centerContainer\">\n                    <canvas ref=\"canvas\" className=\"center\" width={1200} height={800} onClick={this.handleClick.bind(this)}/>\n                    <img className=\"center\" ref=\"image\" src={url} alt=\"new\" display=\"none\" />\n                </div>\n    }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render( <Image />,  rootElement);"]},"metadata":{},"sourceType":"module"}